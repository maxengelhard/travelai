AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "SAM template for backend and related functions"

Globals:
  Function:
    Timeout: 60
    Tracing: PassThrough
  Api:
    Cors: 
      AllowMethods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
      AllowHeaders: "'Accept-Encoding,Content-Encoding,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Client-ID,key,secret,session'"
      AllowOrigin: "'*'"

Parameters:
  HOSTEDZONEID:
    Type: String
  CERTIFICATEARN:
    Type: String
  STAGE:
    Type: String
  APIDOMAINSUFFIX:
    Type: String
  USERPOOLID:
    Type: String
  DBUSER:
    Type: String
  DBHOST:
    Type: String
  DBNAME:
    Type: String
  DBPASSWORD:
    Type: String
  STRIPESECRETKEY:
    Type: String
  STRIPEWEBHOOKKEY:
    Type: String
  # STRIPECONNECTWEBHOOKKEY:
  #   Type: String
  # STRIPEPRODUCTID:
  #   Type: String
  # STRIPECOUPON:
  #   Type: String
  OPENAIAPIKEY:
    Type: String
  EMAILPASSWORD:
    Type: String
  

Conditions:
  IsProd: !Equals [ !Ref STAGE, prd ]

Resources:

  # define api gateway
  ApiGatewayBackend:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref STAGE
      Name: !Sub "tripjourney_api_${STAGE}"
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${USERPOOLID}"
  
  # ApiGatewayStripe:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     StageName: !Ref STAGE
  #     Name: !Sub "stripe_handler_${STAGE}"
    
  ApiDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub "${APIDOMAINSUFFIX}.tripjourney.co"
      CertificateArn:
        Ref: CERTIFICATEARN

  APIMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: ApiDomain
    Properties: 
      DomainName: !Sub "${APIDOMAINSUFFIX}.tripjourney.co"
      RestApiId: !Ref ApiGatewayBackend
      Stage: !Ref STAGE

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub "${APIDOMAINSUFFIX}.tripjourney.co"
      Type: A
      HostedZoneId: 
        Ref: HOSTEDZONEID
      AliasTarget:
        DNSName: !GetAtt ApiDomain.DistributionDomainName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt ApiDomain.DistributionHostedZoneId

######## API's #########
  Itinerary:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      FunctionName: !Sub "tripjourney_iitinerary_${STAGE}"
      Handler: itinerary.lambda_handler
      Runtime: python3.10
      Architectures: 
        - x86_64
      Description: The main itinerary function
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OPENAIAPIKEY
          DB_USER: !Ref DBUSER
          DB_HOST: !Ref DBHOST
          DB_NAME: !Ref DBNAME
          DB_PASSWORD: !Ref DBPASSWORD
          COGNITO_USER_POOL_ID: !Ref USERPOOLID
          EMAIL_PASSWORD: !Ref EMAILPASSWORD
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayBackend
            Path: /itinerary
            Method: post
      Policies:
        Statement:
          - Effect: Allow
            Action: 
              - logs:CreateLogGroup
            Resource: 
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*" 

  UserStatus:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      FunctionName: !Sub "tripjourney_user_status_${STAGE}"
      Handler: user_status.lambda_handler
      Runtime: python3.10
      Architectures: 
        - x86_64
      Description: Check user status
      Environment:
        Variables:
          DB_USER: !Ref DBUSER
          DB_HOST: !Ref DBHOST
          DB_NAME: !Ref DBNAME
          DB_PASSWORD: !Ref DBPASSWORD
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayBackend
            Path: /user-status
            Method: post
            Auth:
              AddDefaultAuthorizerToCorsPreflight: false
              Authorizer: CognitoAuthorizer
      Policies:
        Statement:
          - Effect: Allow
            Action: 
              - logs:CreateLogGroup
            Resource: 
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

  UserItineraries:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      FunctionName: !Sub "tripjourney_user_itineraries_${STAGE}"
      Handler: user_itineraries.lambda_handler
      Runtime: python3.10
      Architectures: 
        - x86_64
      Description: Get user itineraries
      Environment:
        Variables:
          DB_USER: !Ref DBUSER
          DB_HOST: !Ref DBHOST
          DB_NAME: !Ref DBNAME
          DB_PASSWORD: !Ref DBPASSWORD
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayBackend
            Path: /user-itineraries
            Method: post
            Auth:
              AddDefaultAuthorizerToCorsPreflight: false
              Authorizer: CognitoAuthorizer
      Policies:
        Statement:
          - Effect: Allow
            Action: 
              - logs:CreateLogGroup
            Resource: 
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"


###### STRIPE ######
  StripeUserWebhook:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      FunctionName: !Sub "tripjourney_stripe_user_webhook_${STAGE}"
      Handler: stripe_webhook.lambda_handler
      Runtime: python3.10
      Architectures: 
        - x86_64  
      Description: Stripe webhook for user subscription
      Environment:
        Variables:
          STRIPE_SECRET_KEY: !Ref STRIPESECRETKEY
          STRIPE_WEBHOOK_SECRET: !Ref STRIPEWEBHOOKKEY
          DB_USER: !Ref DBUSER
          DB_HOST: !Ref DBHOST
          DB_NAME: !Ref DBNAME
          DB_PASSWORD: !Ref DBPASSWORD
          COGNITO_USER_POOL_ID: !Ref USERPOOLID
          EMAIL_PASSWORD: !Ref EMAILPASSWORD
      Events:
        StripeWebhook:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayBackend
            Path: /stripe-webhook
            Method: post
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: 
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
          - Effect: Allow
            Action:
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminUpdateUserAttributes
              - cognito-idp:AdminInitiateAuth
              - cognito-idp:AdminRespondToAuthChallenge
              - cognito-idp:AdminGetUser
            Resource:
              - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${USERPOOLID}"
